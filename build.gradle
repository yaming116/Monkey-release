buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven {url "https://dl.google.com/dl/android/maven2/"}
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
    }
}

apply plugin: 'groovy'
apply plugin: "java-gradle-plugin"
apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'


allprojects {
    repositories {
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" } // Mirrors jcenter() and mavenCentral()
        google()
    }
}

version = '1.0.4'
group = 'com.github.yaming116'
archivesBaseName = 'monkey-release'

dependencies {
    compile gradleApi()
    compile localGroovy()
    compileOnly  'com.android.tools.build:gradle:3.0.1'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// comment previous line and uncomment following section to use ./gradlew uploadArchives to upload to local Maven repo

uploadArchives {
    repositories {
        mavenDeployer {
//            repository(url: "file://${System.env.HOME}/.m2/repository")
            repository(url: uri('./repo'))
        }
    }
}

def projectName = "MonkeyRelease"
def mavenDesc = 'MonkeyRelease'
def baseUrl = 'https://github.com/yaming116'
def siteUrl = baseUrl
def gitUrl = "${baseUrl}/MonekyRelease.git"
def issueUrl = "${baseUrl}/MonekyRelease/issues"

def licenseIds = ['Apache-2.0']
def licenseNames = ['The Apache Software License, Version 2.0']
def licenseUrls = ['http://www.apache.org/licenses/LICENSE-2.0.txt']
def inception = '2018'

def username = 'yaming116'

install {
    repositories {
        mavenInstaller {
            pom.project {
                // Description
                name projectName
                description mavenDesc
                url siteUrl

                // Archive
                groupId project.group
                artifactId archivesBaseName
                version project.version

                // License
                inceptionYear inception
                licenses {
                    licenseNames.eachWithIndex { ln, li ->
                        license {
                            name ln
                            url licenseUrls[li]
                        }
                    }
                }
                developers {
                    developer {
                        name username
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allGroovy
    classifier = 'sources'
}


task javadocJar(type: Jar, dependsOn: groovydoc) {
    from groovydoc.destinationDir
    classifier = 'javadoc'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}


bintray {
    user = System.getenv('bintray_user')
    key = System.getenv("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = 'maven'
        name = projectName
        desc = mavenDesc
        websiteUrl = siteUrl
        issueTrackerUrl = issueUrl
        vcsUrl = gitUrl
        labels = ['gradle', 'plugin', 'android-release']
        licenses = licenseIds
        publish = true
        publicDownloadNumbers = true
    }
}

ext {
    javaVersion = JavaVersion.VERSION_1_8
}



compileJava {
    sourceCompatibility = project.ext.javaVersion
    targetCompatibility = project.ext.javaVersion

    // Show all warnings except boot classpath
    configure(options) {
        compilerArgs << "-Xlint:-options"       // Turn off "missing" bootclasspath warning
        encoding = "utf-8"
        incremental = true
        fork = true
    }
}

compileGroovy {
    sourceCompatibility = project.ext.javaVersion
    targetCompatibility = project.ext.javaVersion

    // Show all warnings except boot classpath
    configure(options) {
        compilerArgs << "-Xlint:all"            // Turn on all warnings
        compilerArgs << "-Xlint:-options"       // Turn off "missing" bootclasspath warning
        compilerArgs << "-Werror"               // Turn warnings into errors
        compilerArgs << "-Xdiags:verbose"       // Turn on verbose errors
        encoding = "utf-8"
        incremental = true
        fork = true
    }

    configure(groovyOptions) {
        encoding = "utf-8"
        fork = true
    }
}

// Prevent forked processes from stealing focus (on MacOS at least)
tasks.withType(JavaForkOptions) {
    // should improve memory on a 64bit JVM
    jvmArgs "-XX:+UseCompressedOops"
    // should avoid GradleWorkerMain to steal focus
    jvmArgs "-Djava.awt.headless=true"
    jvmArgs "-Dapple.awt.UIElement=true"
}
